package com.security.configuration;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

	// In memory user details

	// 1. username = user || password = 1234
	// 2. username = admin || password = 1234

	// 1. Default username as user and autogenerated password
	// 2. set username as password in properties file

	// To encode passwords in BCrypt Formate
	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}

	// To hold user Details in InMemory
	@Bean
	public UserDetailsService userDetailsService() {
		UserDetails user = User.withUsername("user").password(passwordEncoder().encode("1234")).roles("USER").build();
		UserDetails admin = User.withUsername("admin").password(passwordEncoder().encode("1234")).roles("ADMIN")
				.build();
		return new InMemoryUserDetailsManager(user, admin);
	}

	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception {
		// to make filter for authentication by http security
		// disable csrf() for development, disabling csrf() is not good practice for
		// software development as security.
		httpSecurity.csrf().disable().
		authorizeHttpRequests().
		requestMatchers("/admin")
		.hasRole("ADMIN")
		.requestMatchers("/user")
		.hasRole("USER")
		.requestMatchers("/")
		.permitAll().
		anyRequest().
		authenticated()
		.and()
		.formLogin();

		return httpSecurity.build();
	}

}
